#!/usr/bin/env bash
### .functions - more complicated aliases, basically

## load silly functions
if [ -f ~/.functions_fun ]; then source ~/.functions_fun; fi

## load private, non-tracked, functions
if [ -f ~/.functions_priv ]; then source ~/.functions_priv; fi
if [ -f ~/.functions_iterm_priv ]; then source ~/.functions_iterm_priv; fi
##########################################################

# about: display info about current system
function about() {
  if hash neofetch 2>/dev/null; then
    neofetch
  else
    if hash archey 2>/dev/null; then
      archey -c $1
    else
      if [ -f /proc/version ]; then
        cat /proc/version
      else
        uname -a
      fi
    fi
  fi
}

# ansicolors: display all fg and bg ansi color escape codes
function ansicolors() {
  for attr in $(seq 0 1); do
    for fg in $(seq 30 37); do
      for bg in $(seq 40 47); do
        printf "\033[$attr;${bg};${fg}m$attr;$fg;$bg\033[m "
      done
      echo
    done
  done
}

# dummy: create dummy binary file
function dummy() {
  dd if=/dev/urandom bs=1024 count=$1 of=dummy
}

# tab-cd: lways list directory contents and set title upon 'cd'
function tab-cd() {
  builtin cd "$@";
  ls -lFah;
  tabTitle ${PWD##*/};
}

# get_rand_port: get random available local port for local webservers
function get_rand_port() {
  netstat -aln | awk '
    $6 == "LISTEN" {
      if ($4 ~ "[.:][0-9]+$") {
        split($4, a, /[:.]/);
        port = a[length(a)];
        p[port] = 1
      }
    }
    END {
      for (i = 3000; i < 65000 && p[i]; i++){};
      if (i == 65000) {exit 1};
      print i
    }
  '
}

# countdown: start a full-screen countdown
function countdown(){
  start=${1:60}
  now=$(date +%s)
  watch -tn1 echo '$((now-$(date +%s)+start))'
}

# ???
function port() {
  </dev/tcp/$1/$2 && echo "$2 open" || echo "$2 closed"
}

# simple http servers for local directory in various flavors
function httphp() {
  rport=$(get_rand_port);
  open http://localhost:$rport;
  php -S 127.0.0.1:$rport;
}
function httpy() {
  rport=$(get_rand_port);
  open http://localhost:$rport;
  python -m SimpleHTTPServer $rport;
}
function httruby() {
  rport=$(get_rand_port);
  open http://localhost:$rport;
  ruby -run -e httpd . -p $rport;
}
function httnode() {
  rport=$(get_rand_port);
  http-server -o -p $rport;
}

# jekyll serve script
function jekylls {
  rport=$(get_rand_port);
  bundle exec jekyll serve --port $rport
}

# hugo static html generator
function hugos {
  hugo serve --disableFastRender
}

