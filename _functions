#!/usr/bin/env bash
### .functions - more complicated aliases, basically

# colors
_RED="$(tty -s && tput setaf 1)"
_YELLOW="$(tty -s && tput setaf 3)"
_WHITE="$(tty -s && tput setaf 7)"
_GRAY="$(tty -s && tput setaf 8)"
_BOLD="$(tty -s && tput bold)"
_RESET="$(tty -s && tput sgr0)"

# list: display all functions in custom dotfiles
function _funclist {
  if hash ag 2>/dev/null; then
    ag '(function )([A-Za-z0-9_-]+)' "$HOME"/.functions* --nonumbers
  else
    echo 'Error: Missing ag (silver searcher). Cannot display functions.'
  fi
}

function _anon() {
  read -r str
  pattern="\/Users\/$USER|\/home\/$USER"

  if [[ $str =~ $pattern ]]; then
    # -E argument is required for regex
    echo "$str" | sed -E "s/$pattern/\$HOME/"
  else
    echo "$str"
  fi
}

# about: display info about current system
function about() {
  # OS info
  if hash neofetch 2>/dev/null; then
    neofetch
  else
    if hash archey 2>/dev/null; then
      archey -c "$1"
    else
      if [ -f /etc/redhat-release ]; then
        cat /etc/redhat-release
      else
        if [ -f /etc/os-release ]; then
          cat /etc/os-release
        else
          if [ -f /proc/version ]; then
            cat /proc/version
          else
            uname -a
          fi
        fi
      fi
    fi
  fi

  if [ $# -ge 1 ]; then
    if [ "$1" = '-f' ]; then

      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
      echo "${_BOLD}${_WHITE}| programming langs            |${_RESET}"
      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"

        if hash crystal 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}crystal${_RESET}:    ${_BOLD}${_WHITE}$(crystal --version | head -n 1 | cut -d' ' -f2)${_RESET} $(which crystal)" | _anon

        else
          echo "${_BOLD}${_GRAY}- crystal not installed${_RESET}"
        fi

        if hash go 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}go${_RESET}:         ${_BOLD}${_WHITE}$(go version | cut -d' ' -f3 | cut -d'g' -f2 | cut -d'o' -f2)${_RESET} $(which go)" | _anon

        else
          echo "${_BOLD}${_GRAY}- go not installed${_RESET}"
        fi

        if hash java 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}java${_RESET}:       ${_BOLD}${_WHITE}$(java -version 2>&1 | head -n 1 | cut -d' ' -f3- | cut -d'"' -f2 | cut -d'"' -f1)${_RESET} $(which java)" | _anon

          if hash jenv 2>/dev/null; then
            echo "${_BOLD}${_YELLOW}- jenv${_RESET}:     ${_BOLD}${_WHITE}$(jenv --version | cut -d' ' -f2 )${_RESET}; using: $(jenv global)" | _anon
          else
            echo "${_BOLD}${_GRAY}- jenv   not installed${_RESET}"
          fi
        else
          echo "${_BOLD}${_GRAY}- java not installed${_RESET}"
        fi

        if hash node 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}node${_RESET}:       ${_BOLD}${_WHITE}$(node -v)${_RESET} $(which node)" | _anon
          echo "${_BOLD}${_YELLOW}- npm${_RESET}:      ${_BOLD}${_WHITE}$(npm -v)${_RESET} $(which npm)" | _anon
          echo "${_BOLD}${_YELLOW}- npx${_RESET}:      ${_BOLD}${_WHITE}$(npx -v)${_RESET} $(which npx)" | _anon

          if hash nvm 2>/dev/null; then
            echo "${_BOLD}${_YELLOW}- nvm${_RESET}:      ${_BOLD}${_WHITE}$(nvm --version)${_RESET} $(which nvm)" | _anon
          else
            echo "${_BOLD}${_GRAY}- nvm not installed${_RESET}"
          fi
        else
          echo "${_BOLD}${_GRAY}- node   not installed${_RESET}"
        fi

        if hash php 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}php${_RESET}:        ${_BOLD}${_WHITE}$(php -v | head -1 | cut -d' ' -f2)${_RESET} $(which php)" | _anon
        else
          echo "${_BOLD}${_GRAY}- php not installed${_RESET}"
        fi

        py1cmd1=$(hash python 2>/dev/null)
        py1cmd2=$(type python 2>/dev/null)

        if [ "$py1cmd1" ] || [ "$py1cmd2" ]; then
          echo "${_BOLD}${_YELLOW}python${_RESET}:     ${_BOLD}${_WHITE}$(python -c 'import sys; print(sys.version)' | cut -d' ' -f1)${_RESET}$(which python)" | _anon
        else
          echo "${_BOLD}${_GRAY}python not installed${_RESET}"
        fi

        py2cmd1=$(hash python2 2>/dev/null)
        py2cmd2=$(type python2 2>/dev/null)

        if [ "$py2cmd1" ] || [ "$py2cmd2" ]; then
          echo "${_BOLD}${_YELLOW}python2${_RESET}:    ${_BOLD}${_WHITE}$(python2 -c 'import sys; print(sys.version)' | head -1)${_RESET}$(which python2)" | _anon
        else
          echo "${_BOLD}${_GRAY}python2 not installed${_RESET}"
        fi

        if hash python3 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}python3${_RESET}:    ${_BOLD}${_WHITE}$(python3 -c 'import sys; print(sys.version)' | cut -d' ' -f1)${_RESET} $(which python3)" | _anon
        else
          echo "${_BOLD}${_GRAY}- python3 not installed${_RESET}"
        fi

        if hash pyenv 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}- pyenv${_RESET}     ${_BOLD}${_WHITE}$(pyenv -v | cut -d' ' -f2 | cut -d';' -f1)${_RESET}; using: $(pyenv global)" | _anon
        else
          echo "${_BOLD}${_GRAY}- pyenv not installed${_RESET}"
        fi

        if hash ruby 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}ruby${_RESET}:       ${_BOLD}${_WHITE}$(ruby -v | cut -d' ' -f2)${_RESET} $(which ruby)" | _anon

          if hash rbenv 2>/dev/null; then
            echo "${_BOLD}${_YELLOW}- rbenv${_RESET}     ${_BOLD}${_WHITE}$(rbenv -v | cut -d' ' -f2)${_RESET}; using: $(rbenv global)" | _anon
          else
            echo "${_BOLD}${_GRAY}- rbenv not installed${_RESET}"
          fi
        else
          echo "${_BOLD}${_GRAY}- ruby not installed${_RESET}"
        fi

        if hash rustc 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}rust${_RESET}:       ${_BOLD}${_WHITE}$(rustc --version | cut -d' ' -f2)${_RESET} $(which rustc)" | _anon
        else
          echo "${_BOLD}${_GRAY}rustc not installed${_RESET}"
        fi

        if hash tsc 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}tsc${_RESET}:        ${_BOLD}${_WHITE}$(tsc -v | cut -d' ' -f2-)${_RESET} $(which tsc)" | _anon
        else
          echo "${_BOLD}${_GRAY}tsc not installed${_RESET}"
        fi

      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
      echo "${_BOLD}${_WHITE}| package managers             |${_RESET}"
      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"

        if hash asdf 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}asdf${_RESET}:      ${_BOLD}${_WHITE}$(asdf version | cut -d'v' -f2)${_RESET}" | _anon
        else
          echo "${_BOLD}${_GRAY}asdf not installed${_RESET}"
        fi

        if hash bower 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}bower${_RESET}:      ${_BOLD}${_WHITE}$(bower -v)${_RESET} $(which bower)" | _anon
        else
          echo "${_BOLD}${_GRAY}bower not installed${_RESET}"
        fi

        if hash cargo 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}cargo${_RESET}       ${_BOLD}${_WHITE}$(cargo --version | cut -d' ' -f2)${_RESET} $(which cargo)" | _anon
        else
          echo "${_BOLD}${_GRAY}- cargo not installed${_RESET}"
        fi

        if hash composer 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}composer${_RESET}    ${_BOLD}${_WHITE}$(composer --version | cut -d' ' -f3)${_RESET} $(which composer)" | _anon
        else
          echo "${_BOLD}${_GRAY}- composer not installed${_RESET}"
        fi

        if hash gem 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}gem${_RESET}:        ${_BOLD}${_WHITE}$(gem -v)${_RESET} $(which gem)" | _anon
        else
          echo "${_BOLD}${_GRAY}- gem not installed${_RESET}"
        fi

        if hash pip 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}pip${_RESET}:        ${_BOLD}${_WHITE}$(pip --version | cut -d' ' -f2)${_RESET} $(which pip)" | _anon
        else
          echo "${_BOLD}${_GRAY}- pip not installed${_RESET}"
        fi

        if hash pip3 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}pip3${_RESET}:       ${_BOLD}${_WHITE}$(pip3 --version | cut -d' ' -f2)${_RESET} $(which pip3)" | _anon
        else
          echo "${_BOLD}${_GRAY}- pip3 not installed${_RESET}"
        fi

        if hash yarn 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}yarn${_RESET}:       ${_BOLD}${_WHITE}$(yarn --version)${_RESET} $(which yarn)" | _anon
        else
          echo "${_BOLD}${_GRAY}- yarn not installed${_RESET}"
        fi

      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
      echo "${_BOLD}${_WHITE}| web servers                  |${_RESET}"
      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"

        if hash httpd 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}httpd${_RESET}:      ${_BOLD}${_WHITE}$(httpd -v | head -n 1 | cut -d : -f 2 | cut -d'/' -f2 | cut -d' ' -f1)${_RESET} $(which httpd)" | _anon
        else
          echo "${_BOLD}${_GRAY}httpd not installed${_RESET}"
        fi

        if hash nginx 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}nginx${_RESET}:      ${_BOLD}${_WHITE}$(nginx -v 2>&1 | head -n 1 | cut -d : -f 2 | cut -d'/' -f2)${_RESET} $(which nginx)" | _anon
        else
          echo "${_BOLD}${_GRAY}nginx not installed${_RESET}"
        fi

      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
      echo "${_BOLD}${_WHITE}| webdev tools                 |${_RESET}"
      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"

        if hash jekyll 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}jekyll${_RESET}:     ${_BOLD}${_WHITE}$(jekyll --version | cut -d " " -f 2)${_RESET} $(which jekyll)" | _anon
        else
          echo "${_BOLD}${_GRAY}jekyll not installed${_RESET}"
        fi

        if hash hugo 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}hugo${_RESET}:       ${_BOLD}${_WHITE}$(hugo version | cut -d " " -f 2)${_RESET} $(which hugo)" | _anon
        else
          echo "${_BOLD}${_GRAY}hugo not installed${_RESET}"
        fi

        if hash rails 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}rails${_RESET}       ${_BOLD}${_WHITE}$(rails -v | cut -d' ' -f2)${_RESET} $(which rails)" | _anon
        else
          echo "${_BOLD}${_GRAY}- rails not installed${_RESET}"
        fi

        if hash symfony 2>/dev/null; then
          echo "${_BOLD}${_YELLOW}symfony${_RESET}:    ${_BOLD}${_WHITE}$(symfony version | cut -d' ' -f4)${_RESET} $(which symfony)" | _anon
        else
          echo "${_BOLD}${_GRAY}symfony not installed${_RESET}"
        fi

      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
      echo "${_BOLD}${_WHITE}| database systems             |${_RESET}"
      echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"

      if hash mongod 2>/dev/null; then
        echo "${_BOLD}${_YELLOW}mongod${_RESET}:     ${_BOLD}${_WHITE}$(mongod --version | head -1 | cut -d' ' -f3)${_RESET} $(which mongod)" | _anon
      else
        echo "${_BOLD}${_GRAY}mongod not installed${_RESET}"
      fi

      if hash mysql 2>/dev/null; then
        echo "${_BOLD}${_YELLOW}mysql${_RESET}:      ${_BOLD}${_WHITE}$(mysql -V 2>&1 | cut -d' ' -f3- | cut -d',' -f1)${_RESET} $(which mysql)" | _anon
      else
        echo "${_BOLD}${_GRAY}mysql not installed${_RESET}"
      fi

      if hash psql 2>/dev/null; then
        echo "${_BOLD}${_YELLOW}psql${_RESET}:       ${_BOLD}${_WHITE}$(psql --version | cut -d' ' -f3)${_RESET} $(which psql)" | _anon
      else
        echo "${_BOLD}${_GRAY}postgres not installed${_RESET}"
      fi

      if hash sqlite3 2>/dev/null; then
        echo "${_BOLD}${_YELLOW}sqlite3${_RESET}:    ${_BOLD}${_WHITE}$(sqlite3 --version 2>&1 | cut -d' ' -f1)${_RESET} $(which sqlite3)" | _anon
      else
        echo "${_BOLD}${_GRAY}sqlite3 not installed${_RESET}"
      fi


    fi
  else
    echo "note: use 'about -f' for language/package manager info"
  fi
}

# ansicolors: display all fg and bg ansi color escape codes
function ansicolors {
  for attr in $(seq 0 1); do
    for fg in $(seq 30 37); do
      for bg in $(seq 40 47); do
        printf "\033[%i;%i;%im%i;$i;%i\033[m " "$attr" "$bg" "$fg" "$attr" "$fg" "$bg"
      done
      echo
    done
  done
}

# b64: base64 encode string
function b64 {
  echo -n "$1" | openssl base64
}

# countdown: start a full-screen countdown
function countdown() {
  start=${1:60}
  now=$(date +%s)
  watch -tn1 echo "$((now-$(date +%s)+start))"
}

# color show in your terminal
# source: https://twitter.com/climagic/status/817405740772184065
function display_colors {
  yes "$(seq 16 231)" | while read -r i;
  do printf "\x1b[48;5;%im\n" "$i";
  sleep .02;
  done
}

# make it snow in your terminal
# source: http://climagic.org/coolstuff/let-it-snow.html
function display_snow {
  export LINES COLUMNS;
  clear;
  while :;
  do echo $LINES $COLUMNS $((RANDOM % COLUMNS));
  sleep 0.1;
  done|gawk '{a[$3]=0;for(x in a) {o=a[x];a[x]=a[x]+1;printf "\033[%s;%sH ",o,x; printf "\033[%s;%sH*\033[0;0H",a[x],x;}}'
}

# dummy: create dummy binary file
function dummy() {
  dd if=/dev/urandom bs=1024 count="$1" of=dummy
}

# print out list of generic variables
function foobarlist() {
  list=('foo' 'bar' 'baz' 'qux' 'quux' 'quuz' 'corge' 'grault' 'garply' 'waldo' 'fred' 'plugh' 'xyzzy' 'thud')

  if [ $# -eq 0 ]; then
    for w in "${list[@]}"; do
      echo "$w"
    done
  elif [ $# -ge 1 ]; then
    echo "${list[$1]}"
  fi
}

# get_rand_port: get random available local port for local webservers
function get_rand_port {
  netstat -aln | awk '
    $6 == "LISTEN" {
      if ($4 ~ "[.:][0-9]+$") {
        split($4, a, /[:.]/);
        port = a[length(a)];
        p[port] = 1
      }
    }
    END {
      for (i = 3000; i < 65000 && p[i]; i++){};
      if (i == 65000) {exit 1};
      print i
    }
  '
}

# list http ports and procs
function httports {
  # shellcheck disable=SC2196
  lsof -i -n -P | grep "$HTTP_SERVICES" | grep LISTEN | egrep -o ":[0-9]{2,5}" | cut -f2- -d: | sort -n | uniq
}
function httportss {
  # shellcheck disable=SC2196
  sudo lsof -i -n -P | grep "$HTTP_SERVICES" | grep LISTEN | egrep -o ":[0-9]{2,5}" | cut -f2- -d: | sort -n | uniq
}
function httprocs() {
  lsof -i -n -P | grep 'httpd\|vpnkit\|java\|nc\|node\|ng' | grep LISTEN | awk '{print \$1}' | sort -n
}
function httprocss {
  sudo lsof -i -n -P | grep 'httpd\|vpnkit\|java\|nc\|node\|ng' | grep LISTEN | awk '{print \$1}' | sort -n | uniq
}

# simple http servers for local directory in various flavors
## php
function httphp {
  rport=$(get_rand_port);
  open http://localhost:"$rport";
  php -S 127.0.0.1:"$rport";
}
## python 2.x
function httpy2 {
  rport=$(get_rand_port);
  open http://localhost:"$rport";
  python -m SimpleHTTPServer "$rport";
}
## python 3.x
function httpy3 {
  rport=$(get_rand_port);
  open http://localhost:"$rport";
  python3 -m http.server "$rport";
}
## python 3.x (or 2.x if 3.x not available)
function httpy {
  if hash python3 2>/dev/null; then
    httpy3
  else
    httpy2
  fi
}
## nodejs (http-server)
function httnode {
  rport=$(get_rand_port);
  http-server -o -p "$rport";
}
## ruby 1.9.2+
function httruby {
  rport=$(get_rand_port);
  open http://localhost:"$rport";
  ruby -run -e httpd . -p "$rport";
}

## get the Notes field from a Logic Pro X project (e.g. lyrics)
function lpxnotes_dump() {
  # Check if a filename is provided as an argument
  if [ "$#" -ne 1 ]; then
    echo "Usage: lpxnotes_dump <filename>"
  else
    # assuming only one Alternative
    filename=$1/Alternatives/000/ProjectData

    # Check if the file exists
    if [ ! -e "$filename" ]; then
      echo "File not found: $filename"
    else
      # regex pattern for code where Notes start and end (in LPX 10.7, at least)
      pattern='\\\\f0\\\\fs30'
      end_pattern='}'

      # find first, and only first, instance of this to capture Project Notes
      str=$(strings "$filename" | awk -v pattern="$pattern" -v end_pattern="$end_pattern" '
        $0 ~ pattern {
          flag=1
        }
        flag {
          print
        }
        $0 ~ end_pattern && flag {
          flag=0
          exit
        }
      ')

      # clean up output
      notes=$(
        echo "$str" \
        | awk '{gsub(/pard.+/,""); print}' \
        | awk '{gsub(/\\f0\\fs30/,""); print}' \
        | awk '{gsub(/\\cf2 /,""); print}' \
        | awk '{gsub(/^ /,""); print}' \
        | awk '{gsub(/\\/,""); print}' \
        | awk '{gsub(/\}/,""); print}' \
        | awk '{gsub(/^[\s]+$/,""); print}' \
        | awk '{gsub(/qSxT/,""); print}'
      )

      echo "$notes"
    fi
  fi
}

# display public IP using cloudflare/google
# myip 4 -> IPv4, myip 6 -> IPv6, myip -> IPv4 and IPv6
function myip() {
  if [ $# -eq 0 ]; then
    myip4=$(dig +short txt ch whoami.cloudflare @1.0.0.1)
    myip6=$(dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com)

    echo "$myip4" | xargs
    echo "$myip6" | xargs
  elif [ $# -ge 1 ]; then
    if [ "$1" -eq '4' ]; then
      myip=$(dig +short txt ch whoami.cloudflare @1.0.0.1)

      echo "$myip" | xargs
    elif [ "$1" -eq '6' ]; then
      myip=$(dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com)

      echo "$myip" | xargs
    else
      echo "only IPv4 and IPv6 supported"
    fi
  fi
}

# play rainymood music
function rainymood {
  FILE=$((RANDOM%4))
  URL="https://rainymood.com/audio1110/${FILE}.ogg"
  mpv "$URL" && rainymood
}

# roll a die
function roll() {
  if [ $# -ge 1 ]; then
    echo $((RANDOM % 1 + 1))
  else
    echo $((RANDOM % 2))
  fi
}

# speedtest
function speedtest() {
  if hash speedtest-cli 2>/dev/null; then
    logfile="$HOME"/Documents/speedtest_log.txt

    echo "Checking internet speed and logging..."
    {
      date
      echo "============================"
      hostname
      speedtest-cli --simple
      echo "----------------------------"
      echo ""
    } >> "$logfile"
    echo "Done and logged to $logfile"
  else
    echo "speedtest-cli not installed; try brew install speedtest-cli"
  fi
}

# homebrew updating
function steep {
  echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
  echo "${_BOLD}${_WHITE}| START: Homebrew update       |${_RESET}"
  echo "${_BOLD}${_WHITE}| brew update                  |${_RESET}"
  echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"

  if brew update; then
    echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
    echo "${_BOLD}${_WHITE}| START: Homebrew upgrade      |${_RESET}"
    echo "${_BOLD}${_WHITE}| brew upgrade                 |${_RESET}"
    echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
    brew upgrade
    echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
    echo "${_BOLD}${_WHITE}| START: Homebrew upgrade cask |${_RESET}"
    echo "${_BOLD}${_WHITE}| brew update --cask           |${_RESET}"
    echo "${_BOLD}${_WHITE}--------------------------------${_RESET}"
    brew upgrade --cask
  else
    echo "${_BOLD}${_WHITE}-------------------------------${_RESET}"
    echo "${_BOLD}${_RED}could not upgrade due to update error${_RESET}"
  fi
}

# mov to gif
function vid2gif() {
  if ! [ -x "$(command -v ffmpeg)" ]; then
    echo 'Error: ffmpeg is not installed. please install with (brew install ffmpeg)' >&2
    exit 1
  fi

  if ! [ -x "$(command -v gifsicle)" ]; then
    echo 'Error: gifsicle is not installed. please install with (brew install gifsicle)' >&2
    exit 1
  fi

  ffmpeg -i "$1" -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=8 > ~/Downloads/"$1".gif
}

# wav to flac
function wav2flac() {
  if ! [ -x "$(command -v ffmpeg)" ]; then
    echo 'Error: ffmpeg is not installed. please install with (brew install ffmpeg)' >&2
    exit 1
  fi

  for i in *.wav; do ffmpeg -i "$i" "${i%.*}.flac"; done
}

# wav to mp3
function wav2mp3() {
  if ! [ -x "$(command -v ffmpeg)" ]; then
    echo 'Error: ffmpeg is not installed. please install with (brew install ffmpeg)' >&2
    exit 1
  fi

  for i in *.wav; do ffmpeg -i "$i" "${i%.*}.mp3"; done
}

# * to *
function mediaconv() {
  if ! [ -x "$(command -v ffmpeg)" ]; then
    echo 'Error: ffmpeg is not installed. please install with (brew install ffmpeg)' >&2
    exit 1
  fi

  if [ "$#" -lt 2 ]; then
    echo "Usage: mediaconv <ext1> <ext2>"
  fi

  for i in *."$1"; do ffmpeg -i "$i" "${i%.*}.$2"; done
}

##############################################################

## load private, non-tracked, functions
# shellcheck source=/dev/null
if [ -f "$HOME"/.functions_priv ]; then source "$HOME"/.functions_priv; fi
